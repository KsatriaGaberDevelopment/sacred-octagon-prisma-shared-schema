generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Province {
  id             String           @id @default(cuid())
  name           String
  longitude      Float
  latitude       Float
  geoId          String
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  admin          Admin[]
  adminAuthority AdminAuthority[]
  bannerLocation BannerLocation[]
  cities         City[]
  schools        School[]
  users          User[]

  @@index([id])
  @@index([name])
  @@index([id, name])
}

model City {
  id             String           @id @default(cuid())
  name           String
  longitude      Float
  latitude       Float
  geoId          String
  provinceId     String
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  admin          Admin[]
  province       Province         @relation(fields: [provinceId], references: [id])
  schools        School[]
  users          User[]
  adminAuthority AdminAuthority[] @relation("AdminAuthorityToCity")
  bannerLocation BannerLocation[] @relation("BannerLocationToCity")

  @@index([provinceId])
}

model School {
  id             String           @id @default(cuid())
  identity       String           @unique
  name           String
  longitude      Float
  latitude       Float
  cityId         String
  provinceId     String
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  admin          Admin[]
  city           City             @relation(fields: [cityId], references: [id])
  province       Province         @relation(fields: [provinceId], references: [id])
  users          User[]
  adminAuthority AdminAuthority[] @relation("AdminAuthorityToSchool")

  @@index([cityId])
}

model User {
  id                  String               @id @default(cuid())
  authId              String               @unique
  email               String               @unique
  role                Role                 @default(User)
  suspend             Boolean              @default(false)
  accountType         AccountType          @default(Self)
  firstTest           Boolean              @default(false)
  fullname            String               @default("")
  birthDate           DateTime?            @db.Timestamptz(3)
  grade               Int                  @default(0)
  lastGradeUpdateAt   DateTime?            @db.Timestamptz(3)
  schoolIdentity      String               @unique
  loginAt             DateTime?            @db.Timestamptz(3)
  logoutAt            DateTime?            @db.Timestamptz(3)
  playTime            Int                  @default(0)
  characterUsed       String               @default("")
  inventory           Int[]                @default([0, 0, 0])
  schoolId            String?
  cityId              String?
  provinceId          String?
  adminId             String?              @unique
  createdAt           DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime             @updatedAt @db.Timestamptz(3)
  username            String               @unique
  lastIdZoneUnlocked  String               @default("")
  lastIdZonePosition  String               @default("")
  bannerVisitor       BannerVisitor?
  championships       Championship[]
  championshipRecords ChampionshipRecord[]
  redemeedCodes       CodeRedemeer[]
  gempos              Gempo[]
  gempoRecords        GempoRecord[]
  innerLevels         InnerLevel[]
  levels              Level[]
  multiPlayerMember   MultiPlayerMember[]
  subLevels           SubLevel[]
  testParticipant     TestParticipant[]
  admin               Admin?               @relation(fields: [adminId], references: [id], onDelete: Cascade)
  city                City?                @relation(fields: [cityId], references: [id])
  province            Province?            @relation(fields: [provinceId], references: [id])
  school              School?              @relation(fields: [schoolId], references: [id])
  userLogin           UserLogin[]
  zones               Zone[]

  @@index([provinceId])
  @@index([cityId])
  @@index([schoolId])
  @@index([authId])
}

model Zone {
  id               String    @id @default(cuid())
  userId           String
  isComplete       Boolean   @default(false)
  completedAt      DateTime? @db.Timestamptz(3)
  lastLevelId      String    @default("")
  lastSubLevelId   String    @default("")
  lastInnerLevelId String    @default("")
  lastLevelUnlock  String    @default("")
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(3)
  inGameId         String
  posttest         Int       @default(0)
  posttestTryCount Int       @default(0)
  pretest          Int       @default(0)
  pretestTryCount  Int       @default(0)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([inGameId])
  @@index([userId])
}

model Level {
  id           String    @id @default(cuid())
  isUnlock     Boolean   @default(false)
  unlockedAt   DateTime? @db.Timestamptz(3)
  isComplete   Boolean   @default(false)
  completedAt  DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  inGameId     String
  userId       String
  zoneInGameId String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model SubLevel {
  id            String    @id @default(cuid())
  isUnlock      Boolean   @default(false)
  unlockedAt    DateTime? @db.Timestamptz(3)
  isComplete    Boolean   @default(false)
  completedAt   DateTime? @db.Timestamptz(3)
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
  inGameId      String
  levelInGameId String
  userId        String
  zoneInGameId  String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId])
  @@index([levelInGameId])
  @@index([inGameId])
  @@index([userId])
}

model InnerLevel {
  id               String    @id @default(cuid())
  isUnlock         Boolean   @default(false)
  unlockedAt       DateTime? @db.Timestamptz(3)
  isComplete       Boolean   @default(false)
  completedAt      DateTime? @db.Timestamptz(3)
  correctAttempt   Float     @default(0)
  playTime         Int       @default(0)
  point            Int       @default(0)
  played           Int       @default(0)
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(3)
  inGameId         String
  levelInGameId    String
  subLevelInGameId String
  userId           String
  zoneInGameId     String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId])
  @@index([levelInGameId])
  @@index([subLevelInGameId])
  @@index([inGameId])
  @@index([userId])
}

model Gempo {
  id           String    @id @default(cuid())
  isUnlock     Boolean   @default(false)
  unlockedAt   DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  inGameId     String
  userId       String
  zoneInGameId String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, inGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model Championship {
  id           String    @id @default(cuid())
  isUnlock     Boolean   @default(false)
  unlockedAt   DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  inGameId     String
  userId       String
  zoneInGameId String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, inGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model GempoRecord {
  id             String    @id @default(cuid())
  played         Int       @default(0)
  point          Int       @default(0)
  lastPlayedAt   DateTime? @db.Timestamptz(3)
  createdAt      DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime  @updatedAt @db.Timestamptz(3)
  gempoInGameId  String
  inGameId       String
  userId         String
  zoneInGameId   String
  correctAttempt Float     @default(0)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, gempoInGameId])
  @@index([gempoInGameId, inGameId])
  @@index([gempoInGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model ChampionshipRecord {
  id                   String    @id @default(cuid())
  teamWin              Int       @default(0)
  teamLose             Int       @default(0)
  teamPlayed           Int       @default(0)
  teamPoint            Int       @default(0)
  teamLastPlayedAt     DateTime? @db.Timestamptz(3)
  soloWin              Int       @default(0)
  soloLose             Int       @default(0)
  soloPlayed           Int       @default(0)
  soloPoint            Int       @default(0)
  soloLastPlayedAt     DateTime? @db.Timestamptz(3)
  createdAt            DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime  @updatedAt @db.Timestamptz(3)
  championshipInGameId String
  inGameId             String
  userId               String
  zoneInGameId         String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, championshipInGameId])
  @@index([championshipInGameId, inGameId])
  @@index([championshipInGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model UserLogin {
  id         String    @id @default(cuid())
  userId     String
  loginDate  DateTime  @db.Timestamptz(3)
  logoutDate DateTime? @db.Timestamptz(3)
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Admin {
  id                   String                  @id @default(cuid())
  authId               String                  @unique
  email                String                  @unique
  name                 String
  suspend              Boolean                 @default(false)
  role                 Role?
  provinceId           String?
  cityId               String?
  schoolId             String?
  createdAt            DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime                @updatedAt @db.Timestamptz(3)
  authenticatorEnabled Boolean                 @default(false)
  authenticatorQrUrl   String?
  authenticatorSecret  String?
  city                 City?                   @relation(fields: [cityId], references: [id])
  province             Province?               @relation(fields: [provinceId], references: [id])
  school               School?                 @relation(fields: [schoolId], references: [id])
  authority            AdminAuthority[]
  logs                 AdminLog[]
  operationHistories   AdminOperationHistory[] @relation("OperationHistory")
  operations           AdminOperationHistory[] @relation("Operations")
  transactions         AdminTransaction[]      @relation("transactions")
  transactionProcessed AdminTransaction[]      @relation("transactionProcessed")
  banner               Banner[]
  redeemCodes          RedeemCode[]
  tests                Test[]
  user                 User?
}

model AdminLog {
  id        String   @id @default(cuid())
  ipAddress String?
  old       Json?
  new       Json?
  adminId   String
  table     String?
  operation String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
}

model AdminOperationHistory {
  id        String    @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  adminId   String
  opAdminId String
  operation Operation @default(None)
  admin     Admin     @relation("OperationHistory", fields: [adminId], references: [id], onDelete: Cascade)
  opAdmin   Admin     @relation("Operations", fields: [opAdminId], references: [id], onDelete: Cascade)

  @@id([id, createdAt], map: "AdminOperationHistory_pkey1")
}

model AdminAuthority {
  id         String   @id @default(cuid())
  adminId    String
  provinceId String
  grades     Int[]
  admin      Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  province   Province @relation(fields: [provinceId], references: [id])
  cities     City[]   @relation("AdminAuthorityToCity")
  schools    School[] @relation("AdminAuthorityToSchool")

  @@index([provinceId])
}

model Banner {
  id             String           @id @default(cuid())
  thumbnail      String
  link           String?
  startedAt      DateTime?        @db.Timestamptz(3)
  endedAt        DateTime?        @db.Timestamptz(3)
  isHide         Boolean          @default(false)
  adminId        String
  thumbnailId    String
  admin          Admin            @relation(fields: [adminId], references: [id])
  bannerLocation BannerLocation[]
  visitors       BannerVisitor[]
}

model BannerLocation {
  id         String   @id @default(cuid())
  bannerId   String
  provinceId String
  banner     Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  province   Province @relation(fields: [provinceId], references: [id])
  cities     City[]   @relation("BannerLocationToCity")
}

model BannerVisitor {
  id        String   @id @default(cuid())
  bannerId  String   @unique
  userId    String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  traffic   Int      @default(0)
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Test {
  id            String            @id @default(cuid())
  name          String            @default("")
  question      QuestionType
  duration      Int               @default(0)
  passedPoint   Int               @default(0)
  remidialCount Int               @default(-1)
  type          TestType
  quota         Int               @default(-1)
  currentQuota  Int               @default(0)
  code          String?
  zoneId        String?
  startedAt     DateTime          @db.Timestamptz(3)
  endedAt       DateTime?         @db.Timestamptz(3)
  description   String?
  category      Role
  createdAt     DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime          @updatedAt @db.Timestamptz(3)
  adminId       String
  admin         Admin             @relation(fields: [adminId], references: [id])
  participants  TestParticipant[]

  @@index([category])
  @@index([type])
  @@index([type, question])
  @@index([type, question, category])
  @@index([category, type, question, startedAt, endedAt])
}

model TestParticipant {
  id        String                  @id @default(cuid())
  testId    String
  userId    String
  createdAt DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt DateTime                @updatedAt @db.Timestamptz(3)
  highscore Float                   @default(0)
  test      Test                    @relation(fields: [testId], references: [id], onDelete: Cascade)
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  records   TestParticipantRecord[]

  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
}

model TestParticipantRecord {
  id            String          @id @default(cuid())
  participantId String
  startedAt     DateTime?       @db.Timestamptz(3)
  endedAt       DateTime?       @db.Timestamptz(3)
  score         Float           @default(0)
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  answers       Json
  participant   TestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId])
}

model Background {
  id          String   @id @default(cuid())
  name        String
  thumbnail   String
  isUse       Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  thumbnailId String
}

model Setting {
  id        String   @id @default(cuid())
  name      String
  title     String
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model AdminTransaction {
  id                  String      @id @default(cuid())
  createdAt           DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime    @updatedAt @db.Timestamptz(3)
  quantity            Int         @default(0)
  zones               String[]
  adminId             String
  amount              Int
  archived            Boolean     @default(false)
  description         String?
  name                String
  subscriptionTime    Int
  transactionImageId  String?
  transactionImageUrl String?
  transactionRef      String?
  status              Transaction @default(Pending)
  processedAt         DateTime?   @db.Timestamptz(3)
  processedById       String?
  admin               Admin       @relation("transactions", fields: [adminId], references: [id])
  processedBy         Admin?      @relation("transactionProcessed", fields: [processedById], references: [id])
  redeemCode          RedeemCode?

  @@index([name])
  @@index([status])
  @@index([adminId])
  @@index([transactionRef])
  @@index([archived])
}

model RedeemCode {
  id            String           @id @default(cuid())
  transactionId String           @unique
  adminId       String
  code          String           @unique @default(cuid())
  expiredAt     DateTime         @db.Timestamptz(3)
  currentAmount Int
  maxAmount     Int
  data          String[]
  createdAt     DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime         @updatedAt @db.Timestamptz(3)
  suspend       Boolean          @default(false)
  redemeers     CodeRedemeer[]
  admin         Admin            @relation(fields: [adminId], references: [id])
  transaction   AdminTransaction @relation(fields: [transactionId], references: [id])

  @@index([adminId])
}

model CodeRedemeer {
  id        String     @id @default(cuid())
  banned    Boolean    @default(false)
  userId    String
  codeId    String
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt @db.Timestamptz(3)
  code      RedeemCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@unique([id, userId])
  @@unique([codeId, userId])
  @@index([codeId])
  @@index([userId])
  @@index([banned])
  @@index([codeId, userId])
  @@index([codeId, banned])
}

model MultiplayerRoom {
  id            String              @id @default(cuid())
  max           Int                 @default(2)
  gameplayId    String              @unique
  botOwner      String
  startedAt     DateTime?           @db.Timestamptz(3)
  endedAt       DateTime?           @db.Timestamptz(3)
  expiredAt     DateTime?           @db.Timestamptz(3)
  isStarted     Boolean             @default(false)
  isEnded       Boolean             @default(false)
  createdAt     DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime            @updatedAt @db.Timestamptz(3)
  currentMember Int                 @default(0)
  members       MultiPlayerMember[]

  @@index([max])
  @@index([max, startedAt])
  @@index([max, startedAt, currentMember])
}

model MultiPlayerMember {
  id           String          @id @default(cuid())
  roomId       String
  userId       String
  point        Int             @default(0)
  bonusPoint   Int             @default(0)
  isReady      Boolean         @default(false)
  isComplete   Boolean         @default(false)
  isBot        Boolean         @default(false)
  joinedAt     DateTime        @default(now()) @db.Timestamptz(3)
  finishedAt   DateTime?       @db.Timestamptz(3)
  isDisconnect Boolean         @default(false)
  room         MultiplayerRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id])
}

enum Role {
  Developer
  SuperAdmin
  Admin
  SchoolAdmin
  Teacher
  User
}

enum AccountType {
  LMS
  Self
}

enum VoucherType {
  Discount
  FixedPrice
}

enum QuestionType {
  Addition
  Multiplication
  Subtraction
  Division
  Bakalkubagi
}

enum TestType {
  PreTest
  PostTest
  FirstPreTest
  Contest
}

enum Operation {
  None
  Create
  Update
  Delete
}

enum Transaction {
  Pending
  Cancelled
  Settlement
}
