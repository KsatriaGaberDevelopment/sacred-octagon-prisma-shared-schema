generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Province {
  id             String           @id @default(cuid())
  name           String
  longitude      Float
  latitude       Float
  geoId          String           @default("")
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  admin          Admin[]
  adminAuthority AdminAuthority[]
  cities         City[]
  schools        School[]
  subdistricts   Subdistrict[]
  users          User[]
  banners        Banner[]         @relation("BannerToProvince")

  @@index([id])
  @@index([name])
  @@index([id, name])
}

model City {
  id             String           @id @default(cuid())
  name           String
  longitude      Float
  latitude       Float
  geoId          String           @default("")
  provinceId     String
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  admin          Admin[]
  province       Province         @relation(fields: [provinceId], references: [id])
  schools        School[]
  subdistricts   Subdistrict[]
  users          User[]
  adminAuthority AdminAuthority[] @relation("AdminAuthorityToCity")
  banners        Banner[]         @relation("BannerToCity")

  @@index([provinceId])
}

model Subdistrict {
  id             String           @id @default(cuid())
  name           String
  longitude      Float
  latitude       Float
  geoId          String           @default("")
  provinceId     String
  cityId         String
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  admins         Admin[]
  schools        School[]
  city           City             @relation(fields: [cityId], references: [id])
  province       Province         @relation(fields: [provinceId], references: [id])
  users          User[]
  adminAuthority AdminAuthority[] @relation("AdminAuthorityToSubdistrict")
  banners        Banner[]         @relation("BannerToSubdistrict")

  @@index([provinceId])
  @@index([cityId])
}

model School {
  id             String           @id @default(cuid())
  identity       String           @unique
  name           String
  longitude      Float
  latitude       Float
  cityId         String?
  provinceId     String?
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(3)
  level          EducationLevel   @default(NONE)
  subdistrictId  String?
  admin          Admin[]
  city           City?            @relation(fields: [cityId], references: [id])
  province       Province?        @relation(fields: [provinceId], references: [id])
  subdistrict    Subdistrict?     @relation(fields: [subdistrictId], references: [id])
  users          User[]
  adminAuthority AdminAuthority[] @relation("AdminAuthorityToSchool")

  @@index([cityId])
  @@index([provinceId])
  @@index([subdistrictId])
}

model User {
  id                  String               @id @default(cuid())
  authId              String               @unique
  email               String               @unique
  role                Role                 @default(User)
  suspend             Boolean              @default(false)
  accountType         AccountType          @default(Self)
  firstTest           Boolean              @default(false)
  fullname            String               @default("")
  birthDate           DateTime?            @db.Timestamptz(3)
  grade               Int                  @default(0)
  lastGradeUpdateAt   DateTime?            @db.Timestamptz(3)
  schoolIdentity      String               @unique
  loginAt             DateTime?            @db.Timestamptz(3)
  logoutAt            DateTime?            @db.Timestamptz(3)
  playTime            Int                  @default(0)
  characterUsed       String               @default("")
  inventory           Int[]                @default([0, 0, 0])
  schoolId            String?
  cityId              String?
  provinceId          String?
  adminId             String?              @unique
  createdAt           DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime             @updatedAt @db.Timestamptz(3)
  username            String               @unique
  lastIdZoneUnlocked  String               @default("")
  lastIdZonePosition  String               @default("")
  subdistrictId       String?
  gender              Gender               @default(None)
  phoneNumber         String?
  currentTransaction  String?
  bannerVisitor       BannerVisitor[]
  championships       Championship[]
  championshipRecords ChampionshipRecord[]
  redeemedCodes       CodeRedeemer[]
  gempos              Gempo[]
  gempoRecords        GempoRecord[]
  innerLevels         InnerLevel[]
  levels              Level[]
  historyMatchMembers MatchHistoryMember[]
  matchMembers        MatchMember[]
  subLevels           SubLevel[]
  testParticipant     TestParticipant[]
  admin               Admin?               @relation(fields: [adminId], references: [id], onDelete: Cascade)
  city                City?                @relation(fields: [cityId], references: [id])
  province            Province?            @relation(fields: [provinceId], references: [id])
  school              School?              @relation(fields: [schoolId], references: [id])
  subdistrict         Subdistrict?         @relation(fields: [subdistrictId], references: [id])
  userLogin           UserLogin[]
  codes               UserRedeemCode[]
  transactions        UserTransaction[]
  zones               Zone[]

  @@index([provinceId])
  @@index([cityId])
  @@index([schoolId])
  @@index([authId])
  @@index([subdistrictId])
}

model Zone {
  id               String    @id @default(cuid())
  userId           String
  isComplete       Boolean   @default(false)
  completedAt      DateTime? @db.Timestamptz(3)
  lastLevelId      String    @default("")
  lastSubLevelId   String    @default("")
  lastInnerLevelId String    @default("")
  lastLevelUnlock  String    @default("")
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(3)
  inGameId         String
  posttest         Int       @default(0)
  posttestTryCount Int       @default(0)
  pretest          Int       @default(0)
  pretestTryCount  Int       @default(0)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([inGameId])
  @@index([userId])
}

model Level {
  id           String    @id @default(cuid())
  isUnlock     Boolean   @default(false)
  unlockedAt   DateTime? @db.Timestamptz(3)
  isComplete   Boolean   @default(false)
  completedAt  DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  inGameId     String
  userId       String
  zoneInGameId String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model SubLevel {
  id            String    @id @default(cuid())
  isUnlock      Boolean   @default(false)
  unlockedAt    DateTime? @db.Timestamptz(3)
  isComplete    Boolean   @default(false)
  completedAt   DateTime? @db.Timestamptz(3)
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
  inGameId      String
  levelInGameId String
  userId        String
  zoneInGameId  String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId])
  @@index([levelInGameId])
  @@index([inGameId])
  @@index([userId])
}

model InnerLevel {
  id                  String    @id @default(cuid())
  isUnlock            Boolean   @default(false)
  unlockedAt          DateTime? @db.Timestamptz(3)
  isComplete          Boolean   @default(false)
  completedAt         DateTime? @db.Timestamptz(3)
  correctAttempt      Float     @default(0)
  playTime            Int       @default(0)
  point               Int       @default(0)
  played              Int       @default(0)
  createdAt           DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime  @updatedAt @db.Timestamptz(3)
  inGameId            String
  levelInGameId       String
  subLevelInGameId    String
  userId              String
  zoneInGameId        String
  correctAttemptCount Int       @default(0)
  maxAttempt          Int       @default(0)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId])
  @@index([levelInGameId])
  @@index([subLevelInGameId])
  @@index([inGameId])
  @@index([userId])
}

model Gempo {
  id           String    @id @default(cuid())
  isUnlock     Boolean   @default(false)
  unlockedAt   DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  inGameId     String
  userId       String
  zoneInGameId String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, inGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model Championship {
  id           String    @id @default(cuid())
  isUnlock     Boolean   @default(false)
  unlockedAt   DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  inGameId     String
  userId       String
  zoneInGameId String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, inGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model GempoRecord {
  id                  String    @id @default(cuid())
  played              Int       @default(0)
  point               Int       @default(0)
  lastPlayedAt        DateTime? @db.Timestamptz(3)
  createdAt           DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime  @updatedAt @db.Timestamptz(3)
  gempoInGameId       String
  inGameId            String
  userId              String
  zoneInGameId        String
  correctAttempt      Float     @default(0)
  highestPoint        Int       @default(0)
  correctAttemptCount Int       @default(0)
  maxAttempt          Int       @default(0)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, gempoInGameId])
  @@index([gempoInGameId, inGameId])
  @@index([gempoInGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model ChampionshipRecord {
  id                   String    @id @default(cuid())
  teamWin              Int       @default(0)
  teamLose             Int       @default(0)
  teamPlayed           Int       @default(0)
  teamPoint            Int       @default(0)
  teamLastPlayedAt     DateTime? @db.Timestamptz(3)
  soloWin              Int       @default(0)
  soloLose             Int       @default(0)
  soloPlayed           Int       @default(0)
  soloPoint            Int       @default(0)
  soloLastPlayedAt     DateTime? @db.Timestamptz(3)
  createdAt            DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime  @updatedAt @db.Timestamptz(3)
  championshipInGameId String
  inGameId             String
  userId               String
  zoneInGameId         String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, inGameId])
  @@index([zoneInGameId, championshipInGameId])
  @@index([championshipInGameId, inGameId])
  @@index([championshipInGameId])
  @@index([zoneInGameId])
  @@index([inGameId])
  @@index([userId])
}

model UserLogin {
  id         String    @id @default(cuid())
  userId     String
  loginDate  DateTime  @db.Timestamptz(3)
  logoutDate DateTime? @db.Timestamptz(3)
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Admin {
  id                   String                  @id @default(cuid())
  authId               String                  @unique
  email                String                  @unique
  name                 String
  suspend              Boolean                 @default(false)
  role                 Role?
  provinceId           String?
  cityId               String?
  schoolId             String?
  createdAt            DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime                @updatedAt @db.Timestamptz(3)
  authenticatorEnabled Boolean                 @default(false)
  authenticatorQrUrl   String?
  authenticatorSecret  String?
  subdistrictId        String?
  city                 City?                   @relation(fields: [cityId], references: [id])
  province             Province?               @relation(fields: [provinceId], references: [id])
  school               School?                 @relation(fields: [schoolId], references: [id])
  subdistrict          Subdistrict?            @relation(fields: [subdistrictId], references: [id])
  authority            AdminAuthority[]
  logs                 AdminLog[]
  operationHistories   AdminOperationHistory[] @relation("OperationHistory")
  operations           AdminOperationHistory[] @relation("Operations")
  transactions         AdminTransaction[]      @relation("transactions")
  transactionProcessed AdminTransaction[]      @relation("transactionProcessed")
  banner               Banner[]
  importExports        ImportExport[]
  redeemCodes          RedeemCode[]
  tests                Test[]
  user                 User?
}

model AdminLog {
  id        String   @id @default(cuid())
  ipAddress String?
  old       Json?
  new       Json?
  adminId   String
  table     String?
  operation String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
}

model AdminOperationHistory {
  id        String    @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  adminId   String
  opAdminId String
  operation Operation @default(None)
  admin     Admin     @relation("OperationHistory", fields: [adminId], references: [id], onDelete: Cascade)
  opAdmin   Admin     @relation("Operations", fields: [opAdminId], references: [id], onDelete: Cascade)

  @@id([id, createdAt], map: "AdminOperationHistory_pkey1")
}

model AdminAuthority {
  id           String        @id @default(cuid())
  adminId      String
  provinceId   String
  grades       Int[]
  admin        Admin         @relation(fields: [adminId], references: [id], onDelete: Cascade)
  province     Province      @relation(fields: [provinceId], references: [id])
  cities       City[]        @relation("AdminAuthorityToCity")
  schools      School[]      @relation("AdminAuthorityToSchool")
  subdistricts Subdistrict[] @relation("AdminAuthorityToSubdistrict")

  @@index([provinceId])
}

model Banner {
  id                      String          @id @default(cuid())
  thumbnail               String
  link                    String?
  startedAt               DateTime?       @db.Timestamptz(3)
  endedAt                 DateTime?       @db.Timestamptz(3)
  isHide                  Boolean         @default(false)
  adminId                 String
  thumbnailId             String
  title                   String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  notificationDescription String?
  nextBroadcastedAt       DateTime?
  admin                   Admin           @relation(fields: [adminId], references: [id])
  visitors                BannerVisitor[]
  cities                  City[]          @relation("BannerToCity")
  provincies              Province[]      @relation("BannerToProvince")
  subdistricts            Subdistrict[]   @relation("BannerToSubdistrict")

  @@index([isHide])
  @@index([startedAt])
  @@index([endedAt])
  @@index([adminId])
  @@index([startedAt, endedAt, isHide])
}

model BannerVisitor {
  id        String   @id @default(cuid())
  bannerId  String
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  traffic   Int      @default(0)
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bannerId, userId])
  @@index([bannerId])
  @@index([userId])
}

model Test {
  id            String            @id @default(cuid())
  name          String            @default("")
  question      QuestionType
  duration      Int               @default(0)
  passedPoint   Int               @default(0)
  remidialCount Int               @default(-1)
  type          TestType
  quota         Int               @default(-1)
  currentQuota  Int               @default(0)
  code          String?
  zoneId        String?
  startedAt     DateTime          @db.Timestamptz(3)
  endedAt       DateTime?         @db.Timestamptz(3)
  description   String?
  category      Role
  createdAt     DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime          @updatedAt @db.Timestamptz(3)
  adminId       String
  admin         Admin             @relation(fields: [adminId], references: [id])
  participants  TestParticipant[]

  @@index([category])
  @@index([type])
  @@index([type, question])
  @@index([type, question, category])
  @@index([category, type, question, startedAt, endedAt])
  @@index([zoneId, type])
}

model TestParticipant {
  id        String                  @id @default(cuid())
  testId    String
  userId    String
  createdAt DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt DateTime                @updatedAt @db.Timestamptz(3)
  highscore Float                   @default(0)
  test      Test                    @relation(fields: [testId], references: [id], onDelete: Cascade)
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  records   TestParticipantRecord[]

  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
}

model TestParticipantRecord {
  id            String          @id @default(cuid())
  participantId String
  startedAt     DateTime?       @db.Timestamptz(3)
  endedAt       DateTime?       @db.Timestamptz(3)
  score         Float           @default(0)
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  answers       Json
  participant   TestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId])
}

model Background {
  id          String   @id @default(cuid())
  name        String
  thumbnail   String
  isUse       Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  thumbnailId String
}

model Setting {
  id        String   @id @default(cuid())
  name      String
  title     String
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model AdminTransaction {
  id                  String      @id @default(cuid())
  createdAt           DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime    @updatedAt @db.Timestamptz(3)
  quantity            Int         @default(0)
  zones               String[]
  adminId             String
  amount              Int
  archived            Boolean     @default(false)
  description         String?
  name                String
  subscriptionTime    Int
  transactionImageId  String?
  transactionImageUrl String?
  transactionRef      String?
  status              Transaction @default(Pending)
  processedAt         DateTime?   @db.Timestamptz(3)
  processedById       String?
  admin               Admin       @relation("transactions", fields: [adminId], references: [id])
  processedBy         Admin?      @relation("transactionProcessed", fields: [processedById], references: [id])
  redeemCode          RedeemCode?

  @@index([name])
  @@index([status])
  @@index([adminId])
  @@index([transactionRef])
  @@index([archived])
}

model RedeemCode {
  id            String           @id @default(cuid())
  transactionId String           @unique
  adminId       String
  code          String           @unique @default(cuid())
  expiredAt     DateTime?        @db.Timestamptz(3)
  currentAmount Int
  maxAmount     Int
  data          String[]
  createdAt     DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime         @updatedAt @db.Timestamptz(3)
  suspend       Boolean          @default(false)
  redeemers     CodeRedeemer[]
  admin         Admin            @relation(fields: [adminId], references: [id])
  transaction   AdminTransaction @relation(fields: [transactionId], references: [id])

  @@index([adminId])
}

model UserRedeemCode {
  id            String          @id @default(cuid())
  userId        String
  expiredAt     DateTime?       @db.Timestamptz(3)
  data          String[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  suspend       Boolean         @default(false)
  transactionId String          @unique
  transaction   UserTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id])

  @@index([expiredAt])
}

model CodeRedeemer {
  id        String     @id @default(cuid())
  banned    Boolean    @default(false)
  userId    String
  codeId    String
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt @db.Timestamptz(3)
  code      RedeemCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@unique([id, userId])
  @@unique([codeId, userId])
  @@index([codeId])
  @@index([userId])
  @@index([banned])
  @@index([codeId, userId])
  @@index([codeId, banned])
}

model ChampionshipMatch {
  id            String        @id @default(cuid())
  max           Int           @default(2)
  gameplayId    String
  botOwner      String?
  startedAt     DateTime?     @db.Timestamptz(3)
  endedAt       DateTime?     @db.Timestamptz(3)
  expiredAt     DateTime?     @db.Timestamptz(3)
  isStarted     Boolean       @default(false)
  isEnded       Boolean       @default(false)
  createdAt     DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(3)
  currentMember Int           @default(0)
  mode          MatchMode
  zoneInGameId  String
  endTime       Int           @default(0)
  members       MatchMember[]

  @@index([gameplayId])
  @@index([max])
  @@index([expiredAt])
  @@index([max, startedAt])
  @@index([max, startedAt, currentMember])
  @@index([isStarted, expiredAt, gameplayId, max, currentMember])
}

model MatchMember {
  id           String            @id @default(cuid())
  roomId       String
  userId       String
  point        Int               @default(0)
  bonusPoint   Int               @default(0)
  isReady      Boolean           @default(false)
  isComplete   Boolean           @default(false)
  isBot        Boolean           @default(false)
  joinedAt     DateTime          @default(now()) @db.Timestamptz(3)
  finishedAt   DateTime?         @db.Timestamptz(3)
  isDisconnect Boolean           @default(false)
  answerPoint  Int               @default(0)
  teamType     TeamType          @default(None)
  status       MatchStatus       @default(None)
  slot         Int               @default(0)
  room         ChampionshipMatch @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id])

  @@unique([roomId, slot])
  @@unique([roomId, userId])
}

model ChampionshipHistory {
  id            String               @id @default(cuid())
  max           Int                  @default(2)
  gameplayId    String
  botOwner      String?
  startedAt     DateTime?            @db.Timestamptz(3)
  endedAt       DateTime?            @db.Timestamptz(3)
  expiredAt     DateTime?            @db.Timestamptz(3)
  isStarted     Boolean              @default(false)
  isEnded       Boolean              @default(false)
  createdAt     DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime             @updatedAt @db.Timestamptz(3)
  currentMember Int                  @default(0)
  mode          MatchMode
  zoneInGameId  String
  endTime       Int                  @default(0)
  currentPoint  Int[]                @default([0, 0])
  members       MatchHistoryMember[]

  @@index([gameplayId])
  @@index([max])
  @@index([max, startedAt])
  @@index([max, startedAt, currentMember])
}

model MatchHistoryMember {
  id                  String              @id @default(cuid())
  roomId              String
  userId              String
  point               Int                 @default(0)
  bonusPoint          Int                 @default(0)
  isReady             Boolean             @default(false)
  isComplete          Boolean             @default(false)
  isBot               Boolean             @default(false)
  joinedAt            DateTime            @default(now()) @db.Timestamptz(3)
  finishedAt          DateTime?           @db.Timestamptz(3)
  isDisconnect        Boolean             @default(false)
  teamType            TeamType            @default(None)
  status              MatchStatus         @default(None)
  slot                Int                 @default(0)
  correctAttempt      Float               @default(0)
  correctAttemptCount Int                 @default(0)
  maxAttempt          Int                 @default(0)
  room                ChampionshipHistory @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id])
}

model Product {
  id               String            @id @default(cuid())
  name             String
  data             String[]
  price            Int
  createdAt        DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime          @updatedAt
  subscriptionTime Int
  transactions     UserTransaction[]
}

model Voucher {
  id           String            @id @default(cuid())
  name         String
  voucher      String            @unique
  voucherType  VoucherType
  amount       Int
  quota        Int
  currentQuota Int
  conditions   String[]
  createdAt    DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime          @updatedAt
  expiredAt    DateTime?
  transactions UserTransaction[]
}

model UserTransaction {
  id                   String          @id @default(cuid())
  createdAt            DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime        @updatedAt
  userId               String
  finalPrice           Int
  voucherId            String?
  productId            String?
  status               Transaction     @default(Pending)
  transactionRef       String          @unique
  transactionActionRef Json
  code                 UserRedeemCode?
  product              Product?        @relation(fields: [productId], references: [id])
  user                 User            @relation(fields: [userId], references: [id])
  voucher              Voucher?        @relation(fields: [voucherId], references: [id])

  @@index([status])
}

model ImportExport {
  id         String               @id @default(cuid())
  adminId    String
  expiredAt  DateTime?            @db.Timestamptz(3)
  method     ImportExportType
  status     ImportExportProgress @default(Waiting)
  fileUrl    String?
  createdAt  DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime             @updatedAt @db.Timestamptz(3)
  fileId     String?
  errorCount Int                  @default(0)
  maxCount   Int                  @default(0)
  queueName  String               @default("")
  admin      Admin                @relation(fields: [adminId], references: [id])
}

model WebSetting {
  id          String   @id @default(cuid())
  title       String
  content     Json     @db.JsonB
  contentHtml String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
}

enum Role {
  Developer
  SuperAdmin
  Admin
  SchoolAdmin
  Teacher
  User
}

enum AccountType {
  LMS
  Self
}

enum ImportExportType {
  Import
  Export
}

enum ImportExportProgress {
  Progress
  Success
  Fail
  Waiting
}

enum VoucherType {
  Discount
  FixedPrice
}

enum QuestionType {
  Addition
  Multiplication
  Subtraction
  Division
  Bakalkubagi
}

enum TestType {
  PreTest
  PostTest
  Contest
}

enum Operation {
  None
  Create
  Update
  Delete
}

enum Transaction {
  Pending
  Cancelled
  Settlement
  Deny
  Expire
  Failure
  Refund
  PartialRefund
  Authorize
}

enum EducationLevel {
  NONE
  SD
  SMP
  SMA
}

enum TeamType {
  None
  Blue
  Red
}

enum MatchMode {
  Solo
  Team
}

enum MatchStatus {
  None
  Win
  Lose
  Draw
}

enum Gender {
  None
  Male
  Female
}
